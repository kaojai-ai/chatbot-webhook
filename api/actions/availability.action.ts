import { LineService } from "../services/line/line.service";
import { AvailabilityService } from "../services/availability";
import logger from "../../shared/logger";
import { OperatingHoursService } from "../services/operating-hours";
import { IntentionResult } from "../intents";
import * as line from '@line/bot-sdk';
import { openaiClient } from "../providers/openai";

export const replyAvailabilityIntention = async (intention: IntentionResult, lineService: LineService, messageEvent: line.MessageEvent) => {
    if (intention.intent === 'availability') {
        // Handle availability check
        const date = intention.details?.date;
        const month = intention.details?.month;
        const year = intention.details?.year;

        try {
          const availabilityService = new AvailabilityService();
          const availability = await availabilityService.getFormattedAvailability({ year, month, date });

          // Send the response
          await lineService.replyMessage(messageEvent.replyToken, [{
            type: 'text',
            text: availability
          }]);
        } catch (error) {
          logger.error(error, 'Error processing availability check: %s', String(error));
          await lineService.replyMessage(messageEvent.replyToken, [{
            type: 'text',
            text: 'Sorry, there was an error checking availability. Please try again later.'
          }]);
        }

        // Here you would typically call your availability service
        // For example: await availabilityService.checkAvailability(intention.details);
      } else if (intention.intent === 'operating_hour') {
        try {
          const operatingHoursService = new OperatingHoursService();
          const message = await operatingHoursService.getOperatingHoursMessage();
          await lineService.replyMessage(messageEvent.replyToken, [{ type: 'text', text: message }]);
        } catch (error) {
          logger.error(error, 'Error fetching operating hours: %s', String(error));
          await lineService.replyMessage(messageEvent.replyToken, [{
            type: 'text',
            text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
          }]);
        }
      } else if (intention.intent === 'joke') {
        // Get a one-line Thai joke via OpenAI
        try {
          const completion = await openaiClient.chat.completions.create({
            model: 'gpt-5-mini',
            messages: [
              { role: 'system', content: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö' },
              { role: 'user', content: '‡∏Ç‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏¢' }
            ],
          });
          const joke = completion.choices[0]?.message?.content?.trim() || '‡∏Ç‡∏≥ ‡πÜ üòÇ';
          await lineService.replyMessage(messageEvent.replyToken, [{ type: 'text', text: joke }]);
        } catch (error) {
          logger.error(error, 'Error fetching joke from OpenAI: %s', String(error));
          await lineService.replyMessage(messageEvent.replyToken, [{
            type: 'text',
            text: '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ üôè'
          }]);
        }
      } else if (intention.intent === 'book') {
        // Booking not yet available; supplier API needed
        await lineService.replyMessage(messageEvent.replyToken, [{
          type: 'text',
          text: '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üò¢ ‡πÄ‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î API ‡πÉ‡∏´‡πâ‡∏á‡∏∞ üò≠'
        }]);
      } else {
        // Default response for other messages
        await lineService.replyMessage(messageEvent.replyToken, [{
          type: 'text',
          text: 'üëã‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤... ‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à üíö ‡πÄ‡∏≠‡∏á‡∏à‡πâ‡∏≤...\n‡∏ñ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏≤‡πÄ‡∏•‡∏¢\n‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ ‚è∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ô‡∏∞ üòÇ\n‡πÅ‡∏ß‡∏∞‡πÑ‡∏õ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≤ üè† KaoJai.ai'
        }]);
      }
}
